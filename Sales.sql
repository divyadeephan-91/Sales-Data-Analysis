--1. Display the number of states present in the LocationTable

SELECT COUNT(State) as No_of_states from Location

--2. How many products are of regular type?

select count(Type) as Regular_Type_Product from Product
where Type='Regular'

--3. How much spending has been done on marketing of product ID 1?

select sum(marketing) from fact
where ProductId=1

--4. What is the minimum sales of a product?

select min(Sales)as Minimum_sales from fact

--5. Display the max Cost of Good Sold (COGS). 

select max(COGS) as Maximum_Cost_of_Good_sold from fact

--6. Display the details of the product where product type is coffee.

select * from Product 
where Product_Type Like '%coffee%'

--7. Display the details where total expenses are greater than 40.

select * from fact 
where Total_Expenses>40

--8. What is the average sales in area code 719?

select AVG(Sales) as Average_Sales_in_Code_719 from fact
where Area_code=719

--9. Find out the total profit generated by Colorado state

select sum(f.Profit) as Total_Profit from fact f, Location l
where f.Area_Code=l.Area_Code and l.State like '%colorado%'

--(or)

select sum(profit) as total_profit from fact inner join location on fact.Area_Code = location.Area_Code where location.state = 'colorado'

--10. Display the average inventory for each product ID. 

select ProductId, AVG(Inventory) as Average_inventory from fact
group by ProductId order by ProductId asc

--11. Display state in a sequential order in a Location Table. 

select * from Location order by State asc

--12. Display the average budget of the Product where the average budget margin should be greater than 100. 

select ProductId, avg(Budget_Margin) as Average_Budget_Margin from fact   group by ProductId having avg(Budget_Margin)>100

--13. What is the total sales done on date 2010-01-01?

select Date, sum(Sales) as Total_Sales from fact group by Date having Date like'%2010-01-01%'

--14. Display the average total expense of each product ID on an individual date.

select Date, ProductId, avg(Total_Expenses) as Average_Total_Expense from fact group by Date, ProductId order by ProductId asc

--15. Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code. 

select f.Date, f.ProductId, p.Product_Type, p.Product, f.Sales, f.Profit, l.State, f.Area_Code from Product p, Location l, fact f

SELECT f.Date, f.ProductID, p.Product_Type, p.Product, f.Sales, f.Profit, l.State, l.Area_Code
FROM fact f
JOIN Product p ON f.ProductID = p.ProductID
JOIN Location l ON f.Area_Code = l.Area_Code

--16. Display the rank without any gap to show the sales wise rank. 

select ProductID, Sales, DENSE_RANK() over (order by Sales desc) as Sales_Rank from fact

--17. Find the state wise profit and sales. 

select State, sum(Sales) as Total_Sales, sum(Profit) as Total_Profit from fact 
join Location on fact.Area_Code = Location.Area_Code
Group by State order by state asc

--18. Find the state wise profit and sales along with the productname. 

select * from Product

Select State, Product, sum(Profit) as Total_Profit, sum(Sales) as Total_Sales from fact
join Location on fact.Area_Code = Location.Area_Code
join Product on fact.ProductId = Product.ProductId
Group by State, Product order by state asc

--19. If there is an increase in sales of 5%, calculate the increasedsales. 

select ProductId, Sales, sales* 1.05 as Icreased_sales from fact

--20. Find the maximum profit along with the product ID and producttype. 

select * from fact 

select * from Product 


select fact.ProductId, Product.Product_Type, max(Profit) from fact, Product
group by fact.ProductId, product.Product_Type

--21. Create a stored procedure to fetch the result according to the product type from Product Table. 

create Procedure GetProductsByType @p_ProductType varchar(30)
as
	select * from Product
	where Product_Type = @p_ProductType
go

exec GetProductsByType @p_ProductType='Coffee'

--22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss. 

select * , iif(Total_Expenses < 60, 'Profit', 'Loss') as Profit_or_Loss from fact

SELECT *,
       CASE
           WHEN Total_Expenses < 60 THEN 'Profit'
           ELSE 'Loss'
       END AS ProfitLoss
FROM fact


SELECT *, Profit_or_Loss=
       CASE
           WHEN Total_Expenses < 60 THEN 'Profit'
           ELSE 'Loss'
       END 
FROM fact

--23. Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order. 

select  ProductId, Date , sum(sales) as weeklysales from fact group by rollup( ProductId, Date)

 
--24. Apply union and intersection operator on the tables which consist of attribute area code. 

select Area_code from fact
union
select Area_Code from Location

select Area_code from fact
intersect
select Area_Code from Location

--25. Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference.

create function PreferedProductType(@productType as varchar(30))
returns table
as
return(select * from Product where Product_Type=@productType)



select * from dbo.PreferedProductType('tea')


--26. Change the product type from coffee to tea where product ID is 1 and undo it. 

begin transaction
update Product set Product_Type='Tea' where ProductId=1

select * from Product

rollback transaction

--27. Display the date, product ID and sales where total expenses are between 100 to 200. 

select Date, ProductId, Sales from fact where Total_Expenses between 100 and 200



--28. Delete the records in the Product Table for regular type. 

begin transaction
delete from Product where Type='Regular'

select * from Product

rollback transaction

--29. Display the ASCII value of the fifth character from the columnProduct

select ASCII(SUBSTRING(Product, 5, 1)) as ASCII_Value from Product